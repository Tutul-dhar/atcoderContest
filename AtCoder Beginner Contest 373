//a number...
#include<bits/stdc++.h>
#include<iostream>
#include<set>
#include<map>
#include<iterator>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

///Defines.....
#define ll              long long
#define int              long long
#define pb              push_back
#define RIP(i,n)        for(ll i=0; i<n; i++)
#define PI              acos(-1)
#define nl              '\n'


using namespace std;
using namespace __gnu_pbds;
typedef tree<ll, null_type, less<ll>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;


///Constants........
const ll mod = 1e9+7;
//const int mod = 998244353;
const int N = 1e5 + 5;
const ll Max = 1e5+5;
const ll inf = 1e18+5;
const ll mx_n = 1e7+5;
const int LOG = 20;

///Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right
 int dy[] = {+1, -1, +0, +0};
// int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move
//int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1};
// int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move
// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};

inline void norm(ll &a) {a%=mod; (a<0) && (a+=mod) ;}
inline ll modAdd(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a+b)%mod;}
inline ll modSub(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a-b)%mod;}
inline ll modMul(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a*b)%mod;}
inline ll modpow(ll a,ll p) {ll ans=1;while(p){if(p%2)ans=(ans*a)%mod;a=(a*a)%mod;p/=2;} return ans;}

///Functions..........
ll bigmod(ll a, ll p, ll M)
{
    p %= (M-1);
    ll result = 1LL;
    while(p>0LL){
        if((p&1LL)) result = (result * a) % M;
        a = (a * a) % M;
        p>>=1LL;

    }
    return result;
}

ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a,ll b){ return (a/gcd(a, b)*b);}

ll inverse(ll a, ll M){
    return bigmod(a, M-2, M) % M;
}
ll ncr(ll a, ll b){ ll x = max(a-b, b), ans=1; for(ll K=a, L=1; K>=x+1; K--, L++){ ans = ans * K % mod; ans = ans * inverse(L, mod) % mod;} return ans;}
ll ncrwithk(ll n,ll k){if(k>n-k) k=n-k;ll p=1,pp=1;if(k!=0){while(k){p*=n;pp*=k;ll m=__gcd(p,pp);p/=m;pp/=m;n--;k--;}}else p=1;return p;}
ll fact[Max];
ll ncr_mod(ll n,ll r) {if(n < r || r < 0) return 0;return (((fact[n]*inverse(fact[r], mod))%mod)*inverse(fact[n-r], mod))%mod;}
void fac() {fact[0] = 1; for(ll i = 1; i < Max; i++) fact[i] = (i*fact[i-1])%mod;}


            /********************************* Let's Start *********************************/



void solve() {
    ll ans = 0;
    string s;
    RIP(i,12) {
        cin >> s;
        if(s.size() == i+1) ans++;
    }
    cout << ans << nl;
}



int32_t main() {
    ios_base::sync_with_stdio(0), cin.tie(0);
    int t = 1;

    //cin >> t;
    //ll cas = 1;
    while(t--) {
        //cout << "Case " << cas++ << ": ";
        solve();
    }
}
//B numvber...

#include<bits/stdc++.h>
#include<iostream>
#include<set>
#include<map>
#include<iterator>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

///Defines.....
#define ll              long long
#define int              long long
#define pb              push_back
#define RIP(i,n)        for(ll i=0; i<n; i++)
#define PI              acos(-1)
#define nl              '\n'


using namespace std;
using namespace __gnu_pbds;
typedef tree<ll, null_type, less<ll>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;


///Constants........
const ll mod = 1e9+7;
//const int mod = 998244353;
const int N = 1e5 + 5;
const ll Max = 1e5+5;
const ll inf = 1e18+5;
const ll mx_n = 1e7+5;
const int LOG = 20;

///Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right
 int dy[] = {+1, -1, +0, +0};
// int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move
//int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1};
// int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move
// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};

inline void norm(ll &a) {a%=mod; (a<0) && (a+=mod) ;}
inline ll modAdd(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a+b)%mod;}
inline ll modSub(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a-b)%mod;}
inline ll modMul(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a*b)%mod;}
inline ll modpow(ll a,ll p) {ll ans=1;while(p){if(p%2)ans=(ans*a)%mod;a=(a*a)%mod;p/=2;} return ans;}

///Functions..........
ll bigmod(ll a, ll p, ll M)
{
    p %= (M-1);
    ll result = 1LL;
    while(p>0LL){
        if((p&1LL)) result = (result * a) % M;
        a = (a * a) % M;
        p>>=1LL;

    }
    return result;
}

ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a,ll b){ return (a/gcd(a, b)*b);}

ll inverse(ll a, ll M){
    return bigmod(a, M-2, M) % M;
}
ll ncr(ll a, ll b){ ll x = max(a-b, b), ans=1; for(ll K=a, L=1; K>=x+1; K--, L++){ ans = ans * K % mod; ans = ans * inverse(L, mod) % mod;} return ans;}
ll ncrwithk(ll n,ll k){if(k>n-k) k=n-k;ll p=1,pp=1;if(k!=0){while(k){p*=n;pp*=k;ll m=__gcd(p,pp);p/=m;pp/=m;n--;k--;}}else p=1;return p;}
ll fact[Max];
ll ncr_mod(ll n,ll r) {if(n < r || r < 0) return 0;return (((fact[n]*inverse(fact[r], mod))%mod)*inverse(fact[n-r], mod))%mod;}
void fac() {fact[0] = 1; for(ll i = 1; i < Max; i++) fact[i] = (i*fact[i-1])%mod;}


            /********************************* Let's Start *********************************/



void solve() {
    ll last;
    string s;
    cin >> s;
    ll ans = 0;
    ll a[26];
    RIP(i,s.size()) {
        ll e = s[i] - 'A';
        a[e] = i;
    }
    last = a[0];
    for(ll i = 1; i < 26; i++) {
        ans += abs(last - a[i]);
        last = a[i];
    }
    cout << ans << nl;
}



int32_t main() {
    ios_base::sync_with_stdio(0), cin.tie(0);
    int t = 1;

    //cin >> t;
    //ll cas = 1;
    while(t--) {
        //cout << "Case " << cas++ << ": ";
        solve();
    }
}
/// C number....
#include<bits/stdc++.h>
#include<iostream>
#include<set>
#include<map>
#include<iterator>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

///Defines.....
#define ll              long long
#define int              long long
#define pb              push_back
#define RIP(i,n)        for(ll i=0; i<n; i++)
#define PI              acos(-1)
#define nl              '\n'


using namespace std;
using namespace __gnu_pbds;
typedef tree<ll, null_type, less<ll>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;


///Constants........
const ll mod = 1e9+7;
//const int mod = 998244353;
const int N = 1e5 + 5;
const ll Max = 1e5+5;
const ll inf = 1e18+5;
const ll mx_n = 1e7+5;
const int LOG = 20;

///Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right
 int dy[] = {+1, -1, +0, +0};
// int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move
//int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1};
// int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move
// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};

inline void norm(ll &a) {a%=mod; (a<0) && (a+=mod) ;}
inline ll modAdd(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a+b)%mod;}
inline ll modSub(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a-b)%mod;}
inline ll modMul(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a*b)%mod;}
inline ll modpow(ll a,ll p) {ll ans=1;while(p){if(p%2)ans=(ans*a)%mod;a=(a*a)%mod;p/=2;} return ans;}

///Functions..........
ll bigmod(ll a, ll p, ll M)
{
    p %= (M-1);
    ll result = 1LL;
    while(p>0LL){
        if((p&1LL)) result = (result * a) % M;
        a = (a * a) % M;
        p>>=1LL;

    }
    return result;
}

ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a,ll b){ return (a/gcd(a, b)*b);}

ll inverse(ll a, ll M){
    return bigmod(a, M-2, M) % M;
}
ll ncr(ll a, ll b){ ll x = max(a-b, b), ans=1; for(ll K=a, L=1; K>=x+1; K--, L++){ ans = ans * K % mod; ans = ans * inverse(L, mod) % mod;} return ans;}
ll ncrwithk(ll n,ll k){if(k>n-k) k=n-k;ll p=1,pp=1;if(k!=0){while(k){p*=n;pp*=k;ll m=__gcd(p,pp);p/=m;pp/=m;n--;k--;}}else p=1;return p;}
ll fact[Max];
ll ncr_mod(ll n,ll r) {if(n < r || r < 0) return 0;return (((fact[n]*inverse(fact[r], mod))%mod)*inverse(fact[n-r], mod))%mod;}
void fac() {fact[0] = 1; for(ll i = 1; i < Max; i++) fact[i] = (i*fact[i-1])%mod;}


            /********************************* Let's Start *********************************/



void solve() {
    ll n,mx = -inf,mx1 = -inf;
    ll e;cin >> n;
    RIP(i,n) {
        cin >> e;
        mx = max(mx,e);
    }
    RIP(i,n) {
        cin >> e;
        mx1 = max(mx1,e);
    }
    cout << mx+mx1 << nl;
}



int32_t main() {
    ios_base::sync_with_stdio(0), cin.tie(0);
    int t = 1;

    //cin >> t;
    //ll cas = 1;
    while(t--) {
        //cout << "Case " << cas++ << ": ";
        solve();
    }
}
//// D number...
#include<bits/stdc++.h>
#include<iostream>
#include<set>
#include<map>
#include<iterator>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

///Defines.....
#define ll              long long
#define int              long long
#define pb              push_back
#define RIP(i,n)        for(ll i=0; i<n; i++)
#define PI              acos(-1)
#define nl              '\n'


using namespace std;
using namespace __gnu_pbds;
typedef tree<ll, null_type, less<ll>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;


///Constants........
const ll mod = 1e9+7;
//const int mod = 998244353;
const int N = 1e5 + 5;
const ll Max = 1e5+5;
const ll inf = 1e18+5;
const ll mx_n = 1e7+5;
const int LOG = 20;

///Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right
 int dy[] = {+1, -1, +0, +0};
// int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move
//int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1};
// int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move
// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};

inline void norm(ll &a) {a%=mod; (a<0) && (a+=mod) ;}
inline ll modAdd(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a+b)%mod;}
inline ll modSub(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a-b)%mod;}
inline ll modMul(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a*b)%mod;}
inline ll modpow(ll a,ll p) {ll ans=1;while(p){if(p%2)ans=(ans*a)%mod;a=(a*a)%mod;p/=2;} return ans;}

///Functions..........
ll bigmod(ll a, ll p, ll M)
{
    p %= (M-1);
    ll result = 1LL;
    while(p>0LL){
        if((p&1LL)) result = (result * a) % M;
        a = (a * a) % M;
        p>>=1LL;

    }
    return result;
}

ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a,ll b){ return (a/gcd(a, b)*b);}

ll inverse(ll a, ll M){
    return bigmod(a, M-2, M) % M;
}
ll ncr(ll a, ll b){ ll x = max(a-b, b), ans=1; for(ll K=a, L=1; K>=x+1; K--, L++){ ans = ans * K % mod; ans = ans * inverse(L, mod) % mod;} return ans;}
ll ncrwithk(ll n,ll k){if(k>n-k) k=n-k;ll p=1,pp=1;if(k!=0){while(k){p*=n;pp*=k;ll m=__gcd(p,pp);p/=m;pp/=m;n--;k--;}}else p=1;return p;}
ll fact[Max];
ll ncr_mod(ll n,ll r) {if(n < r || r < 0) return 0;return (((fact[n]*inverse(fact[r], mod))%mod)*inverse(fact[n-r], mod))%mod;}
void fac() {fact[0] = 1; for(ll i = 1; i < Max; i++) fact[i] = (i*fact[i-1])%mod;}


            /********************************* Let's Start *********************************/



void solve() {
    ll n,m;
    cin >> n >> m;
    vector<pair<ll,ll>> g[n+1];
    ll u,v,w;
    RIP(i,m) {
        cin >> u >> v >> w;
        g[u].pb({v,w});
        g[v].pb({u,-w});
    }

    ll ans[n+1],vis[n+1] = {0};
    for(ll i = 1; i <= n; i++) {
        if(vis[i]) continue;
        queue<pair<ll,ll>> q;
        q.push({i,0});
        while(q.size()) {
            auto it = q.front();
            q.pop();
            ll node = it.first,val = it.second;
            if(vis[node]) continue;
            ans[node] = val;
            vis[node] = 1;
            for(auto ch : g[node]) {
                if(vis[ch.first] == 0) {
                    ll p = val + ch.second;
                    q.push({ch.first,p});
                }
            }
        }
    }
    for(ll i = 1; i <= n; i++) cout << ans[i] << ' ';
    cout << nl;
}



int32_t main() {
    ios_base::sync_with_stdio(0), cin.tie(0);
    int t = 1;

    //cin >> t;
    //ll cas = 1;
    while(t--) {
        //cout << "Case " << cas++ << ": ";
        solve();
    }
}
/// E number ...
#include<bits/stdc++.h>
#include<iostream>
#include<set>
#include<map>
#include<iterator>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

///Defines.....
#define ll              long long
#define int              long long
#define pb              push_back
#define RIP(i,n)        for(ll i=0; i<n; i++)
#define PI              acos(-1)
#define nl              '\n'


using namespace std;
using namespace __gnu_pbds;
typedef tree<ll, null_type, less<ll>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;


///Constants........
const ll mod = 1e9+7;
//const int mod = 998244353;
const int N = 1e5 + 5;
const ll Max = 1e5+5;
const ll inf = 1e18+5;
const ll mx_n = 1e7+5;
const int LOG = 20;

///Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right
 int dy[] = {+1, -1, +0, +0};
// int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move
//int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1};
// int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move
// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};

inline void norm(ll &a) {a%=mod; (a<0) && (a+=mod) ;}
inline ll modAdd(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a+b)%mod;}
inline ll modSub(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a-b)%mod;}
inline ll modMul(ll a,ll b) {a%=mod, b%=mod; norm(a),norm(b); return (a*b)%mod;}
inline ll modpow(ll a,ll p) {ll ans=1;while(p){if(p%2)ans=(ans*a)%mod;a=(a*a)%mod;p/=2;} return ans;}

///Functions..........
ll bigmod(ll a, ll p, ll M)
{
    p %= (M-1);
    ll result = 1LL;
    while(p>0LL){
        if((p&1LL)) result = (result * a) % M;
        a = (a * a) % M;
        p>>=1LL;

    }
    return result;
}

ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a,ll b){ return (a/gcd(a, b)*b);}

ll inverse(ll a, ll M){
    return bigmod(a, M-2, M) % M;
}
ll ncr(ll a, ll b){ ll x = max(a-b, b), ans=1; for(ll K=a, L=1; K>=x+1; K--, L++){ ans = ans * K % mod; ans = ans * inverse(L, mod) % mod;} return ans;}
ll ncrwithk(ll n,ll k){if(k>n-k) k=n-k;ll p=1,pp=1;if(k!=0){while(k){p*=n;pp*=k;ll m=__gcd(p,pp);p/=m;pp/=m;n--;k--;}}else p=1;return p;}
ll fact[Max];
ll ncr_mod(ll n,ll r) {if(n < r || r < 0) return 0;return (((fact[n]*inverse(fact[r], mod))%mod)*inverse(fact[n-r], mod))%mod;}
void fac() {fact[0] = 1; for(ll i = 1; i < Max; i++) fact[i] = (i*fact[i-1])%mod;}


            /********************************* Let's Start *********************************/



void solve() {
    ll n,m,k;
    cin >> n >> m >> k;
    vector<pair<ll,ll>> v;
    vector<ll> vv;
    ll pref[n+1] = {0},ans[n+1] = {0};
    ll e;
    RIP(i,n) {
        cin >> e;
        k -= e;
        vv.pb(e);
        v.pb({e,i});
    }
    sort(v.begin(),v.end());
    sort(vv.begin(),vv.end());
    ll ind = 0;
    for(auto it : v) {
        pref[ind++] = it.first;
    }
    for(ll i = 1; i < n; i++) pref[i] += pref[i-1];

    for(ll i = n-1; i >= 0; i--) {
        ll l = 0,r = k,res = -1;
        while(l <= r) {
            ll mid = (l + r)>>1ll;
            ll rem = k - mid;
            ll x = vv[i] + mid;
            ll ind = upper_bound(vv.begin(),vv.end(),x) - vv.begin();
            if(ind == n) ind--;
            if(ind >= 0 and vv[ind] > x) ind--;
            ll ex = n - ind - 1;
            if(ex >= m) {
                l = mid+1;
                continue;
            }
            ex = m-ex;
            ll cc = ex;
            ll ind1 = ind - ex + 1;
            ll bad = 0;
            if(ind1 >= 0 and vv[ind1] <= vv[i]) {
                ind1--;
                bad = vv[i];
            }
            if(ind1 < 0) {
                r = mid-1;
                res = mid;
                continue;
            }
            ll lagbe = pref[ind] - (ind1-1 >= 0? pref[ind1-1]:0ll);
            lagbe -= bad;
            lagbe = ex * (vv[i]+mid+1ll) - lagbe;
            if(lagbe > rem) {
                r = mid-1;
                res = mid;
            } else l = mid+1;
        }
        ans[v[i].second] = res;
    }
    for(ll i = 0; i < n; i++) cout << ans[i] << ' ';
    cout << nl;
}



int32_t main() {
    ios_base::sync_with_stdio(0), cin.tie(0);
    int t = 1;

    //cin >> t;
    //ll cas = 1;
    while(t--) {
        //cout << "Case " << cas++ << ": ";
        solve();
    }
}

